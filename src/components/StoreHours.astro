---
export interface Props {
  hours: {
    monday: string;
    tuesday: string;
    wednesday: string;
    thursday: string;
    friday: string;
    saturday: string;
    sunday: string;
  };
  compact?: boolean;
}

const { hours, compact = false } = Astro.props;

// Get today's day
const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
const today = days[new Date().getDay()];

// Check if store is currently open (simplified - would need actual time comparison)
const isOpen = true; // Placeholder - implement actual logic based on current time
---

<div class={`bg-white rounded-lg ${compact ? 'p-4' : 'p-6'} shadow-md`}>
  <div class="flex items-center justify-between mb-4">
    <h3 class={`font-semibold text-gray-900 ${compact ? 'text-lg' : 'text-xl'}`}>Store Hours</h3>
    <span class={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
      isOpen ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
    }`}>
      <span class={`w-2 h-2 rounded-full mr-2 ${isOpen ? 'bg-green-600' : 'bg-red-600'}`}></span>
      {isOpen ? 'Open Now' : 'Closed'}
    </span>
  </div>
  
  <div class="space-y-2">
    {Object.entries(hours).map(([day, time]) => (
      <div class={`flex justify-between items-center py-2 ${
        day === today ? 'bg-primary-50 -mx-4 px-4 rounded' : ''
      }`}>
        <span class={`font-medium capitalize ${
          day === today ? 'text-primary-700' : 'text-gray-700'
        }`}>
          {day}
          {day === today && <span class="text-xs ml-2">(Today)</span>}
        </span>
        <span class={`${day === today ? 'text-primary-600 font-medium' : 'text-gray-600'}`}>
          {time}
        </span>
      </div>
    ))}
  </div>
  
  {!compact && (
    <div class="mt-4 pt-4 border-t text-sm text-gray-500">
      <p>ðŸ“… Open 7 days a week</p>
      <p>ðŸŽ„ Extended hours during holiday seasons</p>
    </div>
  )}
</div>